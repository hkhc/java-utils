/*
 * Copyright (c) 2018. Herman Cheung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'groovy'
    id "java-library"
    id "maven-publish"
}

apply plugin: 'com.jfrog.bintray'
apply from: 'bintray.gradle'

sourceSets {
    test {
        groovy {
            // Workaround for issue https://issuetracker.google.com/issues/65712492
            // regarding to "Class not found .... Empty test suite" issue
            outputDir = sourceSets.test.java.outputDir
        }
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Workaround for issue https://issuetracker.google.com/issues/65712492
    // regarding to "Class not found .... Empty test suite" issue
//    testRuntimeOnly files("build/classes/groovy/test")
//    testRuntimeOnly files("build/classes/groovy/main")

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.1.0'
    testImplementation 'org.codehaus.groovy:groovy-all:2.4.13'
    testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

//println "sourcesets ${sourceSets}"
//println "sourcesets main ${sourceSets.main.allSource.srcDirs}"
//println "sourcesets test ${sourceSets.test.allSource.srcDirs}"
//println "sourcesets main output ${sourceSets.main.output.files}"
//println "sourcesets test output ${sourceSets.test.output.files}"
//println "test ${configurations.test.files}"
